name: Fetch Changelogs

on:
  schedule:
    - cron: '0 10 * * *' # 6am US Eastern Time (ET) = 10:00 UTC
  workflow_dispatch:

jobs:
  sync-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: "22"

      - name: Fetch latest releases from all repositories
        id: fetch_latest_releases
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "Fetching latest releases from all Bluefin repositories..."

          # Initialize status tracking
          REPOSITORIES_ACCESSED=""
          REPOSITORIES_FAILED=""

          # Fetch all releases from ublue-os/bluefin to find latest stable and GTS
          echo "Fetching all releases from ublue-os/bluefin..."
          BLUEFIN_RELEASES=$(curl -s -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/ublue-os/bluefin/releases")

          # Check if request was successful
          if echo "$BLUEFIN_RELEASES" | jq -e '.message' > /dev/null; then
            echo "Warning: Failed to fetch bluefin releases"
            echo "API Response: $BLUEFIN_RELEASES"
            REPOSITORIES_FAILED="$REPOSITORIES_FAILED ublue-os/bluefin"
          else
            REPOSITORIES_ACCESSED="$REPOSITORIES_ACCESSED ublue-os/bluefin"
            
            # Find latest stable release (tag contains 'stable')
            BLUEFIN_STABLE_RELEASE=$(echo "$BLUEFIN_RELEASES" | jq -r '[.[] | select(.tag_name | test("stable")) | select(.prerelease == false)] | .[0]')
            if [[ "$BLUEFIN_STABLE_RELEASE" != "null" ]]; then
              BLUEFIN_STABLE_TAG=$(echo "$BLUEFIN_STABLE_RELEASE" | jq -r '.tag_name')
              BLUEFIN_STABLE_URL=$(echo "$BLUEFIN_STABLE_RELEASE" | jq -r '.html_url')
              BLUEFIN_STABLE_DATE=$(echo "$BLUEFIN_STABLE_RELEASE" | jq -r '.published_at')

              # Remove duplicate 'stable' from display version
              CLEAN_TAG=$(echo "$BLUEFIN_STABLE_TAG" | sed 's/^stable-//')
              DISPLAY_VERSION="Bluefin $CLEAN_TAG"

              echo "Latest stable release found: $DISPLAY_VERSION"
              echo "Stable release URL: $BLUEFIN_STABLE_URL"
              
              # Save stable release data
              echo "bluefin_stable_tag=$BLUEFIN_STABLE_TAG" >> $GITHUB_OUTPUT
              echo "bluefin_stable_url=$BLUEFIN_STABLE_URL" >> $GITHUB_OUTPUT
              echo "bluefin_stable_date=$BLUEFIN_STABLE_DATE" >> $GITHUB_OUTPUT
              echo "bluefin_stable_display_version=$DISPLAY_VERSION" >> $GITHUB_OUTPUT
              echo "bluefin_stable_available=true" >> $GITHUB_OUTPUT
            else
              echo "No stable releases found"
              echo "bluefin_stable_available=false" >> $GITHUB_OUTPUT
            fi
            
            # Find latest GTS release (tag contains 'gts')
            BLUEFIN_GTS_RELEASE=$(echo "$BLUEFIN_RELEASES" | jq -r '[.[] | select(.tag_name | test("gts")) | select(.prerelease == false)] | .[0]')
            if [[ "$BLUEFIN_GTS_RELEASE" != "null" ]]; then
              BLUEFIN_GTS_TAG=$(echo "$BLUEFIN_GTS_RELEASE" | jq -r '.tag_name')
              BLUEFIN_GTS_URL=$(echo "$BLUEFIN_GTS_RELEASE" | jq -r '.html_url')
              BLUEFIN_GTS_DATE=$(echo "$BLUEFIN_GTS_RELEASE" | jq -r '.published_at')

              echo "Latest GTS release found: $BLUEFIN_GTS_TAG"
              echo "GTS release URL: $BLUEFIN_GTS_URL"
              
              # Save GTS release data
              echo "bluefin_gts_tag=$BLUEFIN_GTS_TAG" >> $GITHUB_OUTPUT
              echo "bluefin_gts_url=$BLUEFIN_GTS_URL" >> $GITHUB_OUTPUT
              echo "bluefin_gts_date=$BLUEFIN_GTS_DATE" >> $GITHUB_OUTPUT
              echo "bluefin_gts_available=true" >> $GITHUB_OUTPUT
            else
              echo "No GTS releases found"
              echo "bluefin_gts_available=false" >> $GITHUB_OUTPUT
            fi
          fi

          # Try to fetch the latest release from ublue-os/bluefin-lts
          echo "Fetching latest release from ublue-os/bluefin-lts..."
          BLUEFIN_LTS_RELEASE=$(curl -s -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/ublue-os/bluefin-lts/releases/latest")

          # Check if LTS request was successful
          if echo "$BLUEFIN_LTS_RELEASE" | jq -e '.message' > /dev/null; then
            echo "Warning: Failed to fetch latest bluefin-lts release"
            echo "API Response: $BLUEFIN_LTS_RELEASE"
            REPOSITORIES_FAILED="$REPOSITORIES_FAILED ublue-os/bluefin-lts"
            echo "bluefin_lts_available=false" >> $GITHUB_OUTPUT
          else
            # Extract bluefin-lts release information
            BLUEFIN_LTS_TAG=$(echo "$BLUEFIN_LTS_RELEASE" | jq -r '.tag_name')
            BLUEFIN_LTS_URL=$(echo "$BLUEFIN_LTS_RELEASE" | jq -r '.html_url')
            BLUEFIN_LTS_DATE=$(echo "$BLUEFIN_LTS_RELEASE" | jq -r '.published_at')

            echo "Latest bluefin-lts release found: $BLUEFIN_LTS_TAG"
            REPOSITORIES_ACCESSED="$REPOSITORIES_ACCESSED ublue-os/bluefin-lts"
            
            # Save LTS release data
            echo "bluefin_lts_tag=$BLUEFIN_LTS_TAG" >> $GITHUB_OUTPUT
            echo "bluefin_lts_url=$BLUEFIN_LTS_URL" >> $GITHUB_OUTPUT
            echo "bluefin_lts_date=$BLUEFIN_LTS_DATE" >> $GITHUB_OUTPUT
            echo "bluefin_lts_available=true" >> $GITHUB_OUTPUT
          fi

          # Output summary
          echo "repositories_accessed=$REPOSITORIES_ACCESSED" >> $GITHUB_OUTPUT
          echo "repositories_failed=$REPOSITORIES_FAILED" >> $GITHUB_OUTPUT

          # Check if at least one repository was accessible
          if [[ -z "$REPOSITORIES_ACCESSED" ]]; then
            echo "Error: No releases could be fetched from any repository"
            exit 1
          fi

          echo "Repository access summary:"
          echo "Accessible repositories:$REPOSITORIES_ACCESSED"
          echo "Failed repositories:$REPOSITORIES_FAILED"

      - name: Process available releases
        id: process_releases
        run: |
          # ... (unchanged code up to changelog generation)
          # At the point of changelog creation, use the clean display version for Bluefin Stable
          # You should update any changelog or summary output referencing Bluefin Stable to use the correct version name ("Bluefin <version>")
          # For example, replace any instance of "Bluefin Stable stable-" or "Bluefin Stable <tag>" with "Bluefin <version>"
          # If updating markdown changelogs, ensure 'Bluefin Stable stable-20250803.2' is replaced with 'Bluefin 20250803.2'
          # ... (rest of code unchanged)

      # ... (rest of workflow unchanged)