name: Sync Bluefin Releases

on:
  schedule:
    - cron: "0 10 * * *" # 6am US Eastern Time (ET) = 10:00 UTC
  workflow_dispatch:
  repository_dispatch:
    types: [bluefin-release]

jobs:
  sync-releases:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup GitHub CLI
        run: |
          # GitHub CLI is pre-installed on ubuntu-latest
          gh --version

      - name: Process releases
        id: process
        run: |
          echo "Processing releases..."
          
          # Function to process a single release
          process_release() {
            local repo="$1"
            local tag="$2"
            local url="$3"
            local date="$4"
            local name="$5"
            local body="$6"
            
            echo "Processing $repo:$tag (published: $date)"
            
            # Call existing script to process release
            if ./scripts/process_single_release.sh "$repo" "$tag" "$url" "$date" "$name" "$body" "false" ""; then
              echo "✅ Processed $repo:$tag"
              return 0
            else
              echo "⚠️ Skipped $repo:$tag (already exists or error)"
              return 1
            fi
          }

          # Track processed releases
          PROCESSED_COUNT=0

          if [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            # Handle single release from repository dispatch
            TAG="${{ github.event.client_payload.tag_name }}"
            URL="${{ github.event.client_payload.html_url }}"
            
            # Determine source repo from URL
            if [[ "$URL" == *"bluefin-lts"* ]] || [[ "$TAG" == lts-* ]]; then
              REPO="ublue-os/bluefin-lts"
            else
              REPO="ublue-os/bluefin"
            fi
            
            # Get release details
            RELEASE_DATA=$(gh api repos/$REPO/releases/tags/$TAG 2>/dev/null || echo "{}")
            
            if [[ "$RELEASE_DATA" != "{}" ]]; then
              DATE=$(echo "$RELEASE_DATA" | jq -r '.published_at')
              NAME=$(echo "$RELEASE_DATA" | jq -r '.name // .tag_name')
              BODY=$(echo "$RELEASE_DATA" | jq -r '.body // ""')
              
              if process_release "$REPO" "$TAG" "$URL" "$DATE" "$NAME" "$BODY"; then
                PROCESSED_COUNT=$((PROCESSED_COUNT + 1))
              fi
            fi
          else
            # Handle scheduled/manual runs - get recent releases (last 10 days)
            echo "Fetching recent releases from repositories..."
            
            # Calculate date threshold (10 days ago)
            CUTOFF_DATE=$(date -d '10 days ago' --iso-8601)
            echo "Looking for releases published after: $CUTOFF_DATE"
            
            # Process stable releases from ublue-os/bluefin
            echo "=== Processing stable releases from ublue-os/bluefin ==="
            STABLE_RELEASES=$(gh api repos/ublue-os/bluefin/releases --paginate --jq "[.[] | select(.tag_name | contains(\"stable\")) | select(.prerelease == false) | select(.published_at > \"$CUTOFF_DATE\")] | sort_by(.published_at) | reverse" 2>/dev/null || echo "[]")
            
            if [[ "$STABLE_RELEASES" != "[]" ]]; then
              echo "$STABLE_RELEASES" | jq -c '.[]' | while read -r release; do
                TAG=$(echo "$release" | jq -r '.tag_name')
                URL=$(echo "$release" | jq -r '.html_url')
                DATE=$(echo "$release" | jq -r '.published_at')
                NAME=$(echo "$release" | jq -r '.name // .tag_name')
                BODY=$(echo "$release" | jq -r '.body // ""')
                
                if process_release "ublue-os/bluefin" "$TAG" "$URL" "$DATE" "$NAME" "$BODY"; then
                  PROCESSED_COUNT=$((PROCESSED_COUNT + 1))
                fi
              done
            else
              echo "No recent stable releases found"
            fi
            
            # Process GTS releases from ublue-os/bluefin
            echo "=== Processing GTS releases from ublue-os/bluefin ==="
            GTS_RELEASES=$(gh api repos/ublue-os/bluefin/releases --paginate --jq "[.[] | select(.tag_name | contains(\"gts\")) | select(.published_at > \"$CUTOFF_DATE\")] | sort_by(.published_at) | reverse" 2>/dev/null || echo "[]")
            
            if [[ "$GTS_RELEASES" != "[]" ]]; then
              echo "$GTS_RELEASES" | jq -c '.[]' | while read -r release; do
                TAG=$(echo "$release" | jq -r '.tag_name')
                URL=$(echo "$release" | jq -r '.html_url')
                DATE=$(echo "$release" | jq -r '.published_at')
                NAME=$(echo "$release" | jq -r '.name // .tag_name')
                BODY=$(echo "$release" | jq -r '.body // ""')
                
                if process_release "ublue-os/bluefin" "$TAG" "$URL" "$DATE" "$NAME" "$BODY"; then
                  PROCESSED_COUNT=$((PROCESSED_COUNT + 1))
                fi
              done
            else
              echo "No recent GTS releases found"
            fi
            
            # Process LTS releases from ublue-os/bluefin-lts
            echo "=== Processing LTS releases from ublue-os/bluefin-lts ==="
            LTS_RELEASES=$(gh api repos/ublue-os/bluefin-lts/releases --paginate --jq "[.[] | select(.published_at > \"$CUTOFF_DATE\")] | sort_by(.published_at) | reverse" 2>/dev/null || echo "[]")
            
            if [[ "$LTS_RELEASES" != "[]" ]]; then
              echo "$LTS_RELEASES" | jq -c '.[]' | while read -r release; do
                TAG=$(echo "$release" | jq -r '.tag_name')
                URL=$(echo "$release" | jq -r '.html_url')
                DATE=$(echo "$release" | jq -r '.published_at')
                NAME=$(echo "$release" | jq -r '.name // .tag_name')
                BODY=$(echo "$release" | jq -r '.body // ""')
                
                if process_release "ublue-os/bluefin-lts" "$TAG" "$URL" "$DATE" "$NAME" "$BODY"; then
                  PROCESSED_COUNT=$((PROCESSED_COUNT + 1))
                fi
              done
            else
              echo "No recent LTS releases found"
            fi
          fi

          echo "processed_count=$PROCESSED_COUNT" >> $GITHUB_OUTPUT
          echo "Processed $PROCESSED_COUNT new releases"

      - name: Create Pull Request
        if: steps.process.outputs.processed_count != '0'
        uses: peter-evans/create-pull-request@271a8d0340265f705b14b6d32b9829c1cb33d45e # v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "feat(changelogs): sync ${{ steps.process.outputs.processed_count }} Bluefin release(s)"
          title: "feat(changelogs): sync ${{ steps.process.outputs.processed_count }} Bluefin release(s)"
          body: |
            ## Bluefin Release Sync
            
            This PR automatically syncs ${{ steps.process.outputs.processed_count }} new Bluefin release changelog(s).
            
            **Trigger:** ${{ github.event_name }}
            **Processed:** ${{ steps.process.outputs.processed_count }} release(s)
            
            Generated by the automated release sync workflow.
          branch: changelogs/sync-bluefin-releases
          delete-branch: true
          draft: false

      - name: Enable auto-merge
        if: steps.process.outputs.processed_count != '0'
        run: |
          # Get the PR number from the previous step
          PR_NUMBER=$(gh pr list --head changelogs/sync-bluefin-releases --json number --jq '.[0].number')
          
          if [[ -n "$PR_NUMBER" && "$PR_NUMBER" != "null" ]]; then
            echo "Enabling auto-merge for PR #$PR_NUMBER"
            gh pr merge $PR_NUMBER --auto --merge
            echo "✅ Auto-merge enabled for PR #$PR_NUMBER"
          else
            echo "⚠️ Could not find PR to enable auto-merge"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
